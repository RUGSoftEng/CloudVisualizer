<script>
    $(document).ready(function() {
        // initial load the query with default values
        getQueries();
        createGraph();
        googlepricelist2();
        //Actions on change of slider
        $('#priceid2').on('input', function () {
            getQueries();

            // uncomment to automatically update on
            //plotData();
        });
    })
    function googlepricelist(usertype, substring, id){
        console.log("starting new google pricelist");
        $.ajax({
            data: {
                substring: substring
            },
            type: 'GET',
            url: usertype,
            contentType: 'application/json',
            success: function (result) {
                var i, x="<table id='VMIMAGEOUTID' border='lpx'>";
                /* All the names of the objects */
                objectNames=[];
                /* The objects themselves in an array */
                objects=[];
                /* Push the information from the result in the arrays */
                for (var i=0; i<result.length; i++) {
                    objectNames.push(result[i].gcp_price_list_as_array["k"]);
                    objects.push(result[i].gcp_price_list_as_array["v"]);
                }
                /* Keys of the objects */
                var keys=Object.keys(objects[0]);
                /* For the column names */
                x += "<td >Name</td>";
                for (i in keys) {
                    /* We only want to show the location that is selected and all the non-country columns */
                    if (ourCountryorNoCountry(keys[i], id)) {
                        x += "<td >"+keys[i]+"</td>";
                    }
                }
                /* Information for in the table */
                for (var k=0; k<objectNames.length; k++) {
                    x+="<tr><td";
                    x += "</td><td data-type=name>" + objectNames[k];
                    for (var j=0; j<keys.length; j++) {
                        /* We only want to show the location that is selected and all the non-country columns */
                        if (ourCountryorNoCountry(keys[j], id)) {
                            x += "</td><td data-type=name>" + objects[k][keys[j]];
                        }
                    }
                    x+="</td></tr>"
                }
                x+="</table>";
                $('#output2').html(x);
            }
        });
    }
    function googlepricelist2(){
        console.log("starting new google pricelist");
        $.ajax({
            type: 'GET',
            url: '/users3',
            contentType: 'application/json',
            success: function (result) {
                pricelist=result[0].gcp_price_list;
                region="us";
                type="F1-MICRO";
                days=1;
                hours=1;
                osType="win";
                GPUType="NVIDIA_TESLA_K80";
                localSSDSize=1;
                PDSSDSize=1;
                PDSize=1;
                PDSnapshot=1;
                preemptible=false;
                committedUsage="1-YEAR";
                determineInstanceType();
                console.log(sustainedUseHourly(instanceType,osType,type,region,GPUType,preemptible,committedUsage,localSSDSize,days,hours));
            }
        });
    }
    var countries=["us", "europe", "america", "asia", "australia"];
    function ourCountryorNoCountry(j, location) {
        if (j==location) {
            return true;
        }
        var first=true, second=true;
        for (var i=0; i<countries.length; i++) {
            if (j.indexOf(countries[i])!=-1) {
                first=false;
            }
            if (location.indexOf(countries[i])!=-1) {
                second=false;
            }
            if (!first && !second) {
                return false;
            }
        }
        return true;
    }
    function getQueries(){
        $.ajax({
            data: {
                price: $('#priceid2').val()
            },
            type: 'GET',
            url: '/users',
            contentType: 'application/json',
            success: function(result) {
                // console.log('get message succes');
                var times=Object.keys(result).length;
                var i, x ="<table id='mainTable' border='1px'>";
                x += "<th onclick='sortTable(0)'>Name</th><th onclick='sortTable(1)'>Type</th><th onclick='sortTable(2)'>Price</th>";
                for (i in result) {
                    x += "<tr><td data-type=name>" + result[i].name + "</td><td data-type=name>" + result[i].type + "</td><td data-type=int>" + result[i].price + "</td></tr>" ;
                }
                x += "</table>";
                $('#output').html(x);
            }
        });
    }
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("mainTable");
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.getElementsByTagName("TR");
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch= true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch= true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount ++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
    function getCol(matrix, col){
        var column = [];
        for(var i=0; i<matrix.length; i++){
            column.push(matrix[i][col]);
        }
        return column;
    }
    function getTableData(){
        var table = document.getElementById("mainTable");
        var tableData =new Array();
        for(var r=1, n = table.rows.length; r<n ;r++){
            var tableRow = new Array();
            for(var c=0, m=table.rows[r].cells.length; c<m; c++){

                // insert correct datatype into array
                if( table.rows[r].cells[c].getAttribute("data-type") == "name" ){
                    tableRow.push(table.rows[r].cells[c].innerHTML);
                } else {

                    tableRow.push(parseInt(table.rows[r].cells[c].innerHTML));
                }
            }
            tableData.push(tableRow);
        }
        return tableData;
    }
    // global variable to hold the graph
    var chart;
    function createGraph(){
        // create graph in canvas area
        var ctx = document.getElementById("graph");
        chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [],
                datasets: [{
                    label: 'Price',
                    data: [],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255,99,132,1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ], borderWidth: 1},
                ]
            },
            options: {
                title:{
                    display:true,
                    text: 'Price comparison'
                },
                responsive: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero:true
                        }
                    }]
                }
            }
        });
    }
    function plotData(){
        var tableData = getTableData();
        chart.data.labels = getCol(tableData, 1);
        chart.data.datasets[0].data = getCol(tableData,2);
        // pass 0 as argument for instant updates
        chart.update();
    }
</script>